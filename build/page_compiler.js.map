{"version":3,"file":"page_compiler.js","sources":["../source/features/compiler.js","../source/utils/page_generator.js","../source/utils/utils.js","../source/utils/linter.js","../source/ui/ChoiceMenu.js","../source/features/base.js","../source/pageBuilder.js"],"sourcesContent":["//@ts-check\r\n\r\n\r\n\r\n\r\nconst reactCompiler = {\r\n    react: 'https://unpkg.com/react@17/umd/react.production.min.js',\r\n    reactDOM: 'https://unpkg.com/react-dom@17/umd/react-dom.production.min.js',\r\n}\r\n\r\nconst vueCompiler = {\r\n    // vue: \"https://unpkg.com/vue@2.5.17/dist/vue.js\"\r\n    vue: 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.14/vue.min.js'\r\n}\r\n\r\nconst preactCompiler = {\r\n    // set: './build/_preact.js',\r\n    // set: '~/build/_preact.js',\r\n\r\n    // preact: 'https://cdnjs.cloudflare.com/ajax/libs/preact/11.0.0-experimental.1/preact.umd.min.js',     // preact\r\n    // hooks: 'https://cdnjs.cloudflare.com/ajax/libs/preact/11.0.0-experimental.1/hooks.umd.min.js',      // hooks\r\n    // compat: 'https://cdnjs.cloudflare.com/ajax/libs/preact/11.0.0-experimental.1/compat.umd.min.js'     // react\r\n\r\n    // set: 'http://127.0.0.1:3000/build/_preact.js',\r\n\r\n    set: document.location.origin + (~document.location.host.indexOf('3000') ? '/build/_preact.js' : '/static/js/compiler_libs/_preact.js'),\r\n}\r\n\r\n\r\nexport const babelCompiler = {\r\n    link: 'https://unpkg.com/@babel/standalone/babel.min.js',\r\n    mode: ' type=\"text/babel\" '\r\n}\r\n\r\n\r\n// export const reactCompilers = [babelCompiler.link, reactCompiler.react, reactCompiler.reactDOM];\r\n\r\n// export const reactCompilers = [\r\n//     preactCompiler.set,\r\n//     babelCompiler.link,\r\n// ];\r\n\r\n// export const reactCompilers = [\r\n//     vueCompiler.vue\r\n// ];\r\n\r\n\r\nexport const compilers = {\r\n    vanile: undefined,\r\n    preact: [babelCompiler.link].concat(Object.values(preactCompiler)),\r\n    vue: Object.values(vueCompiler),\r\n    react: [babelCompiler.link].concat(Object.values(reactCompiler)),    \r\n};\r\n\r\n\r\nexport const defaultValues = [\r\n    // html\r\n    {\r\n        html: '<h2 onclick=\"greeting(event)\">\\n\\tHello world!\\n</h2>',\r\n        css: 'h2 {\\n\\tcolor: orangered;\\n\\tcursor: pointer; \\n\\tfont-family: arial;\\n}',\r\n        javascript: 'function greeting(event){\\n\\talert(\"greeting!\")\\n}'\r\n    },\r\n    // preact\r\n    {\r\n        html: '<div id=\"root\"></div>',\r\n        css: '#root{\\n\\tcolor: orangered;\\n\\tfont-family: arial;\\n}',\r\n        javascript: \"const name = 'world'; \\nrender(\\n\\t<h1>Hello {name}</h1>, \\n\\tdocument.getElementById('root')\\n);\"\r\n    },\r\n    // vue\r\n    {\r\n        html: '<div id=\"app\">\\n\\t<input type=\"text\" v-on:input=\"setMsg\" />\\n\\t<p>{{msg}}</p>\\n</div>',\r\n        css: '#app { \\n\\tcolor: green; \\n}',\r\n        javascript: \"new Vue({\\n\\tel: '#app', \\n\\tdata: {\\n\\t\\tmsg: 'Hello Vue!'\\n\\t}, \\n\\tmethods: {\\n\\t\\tsetMsg: function(e){\\n\\t\\t\\tthis.msg = e.target.value;\\n\\t\\t}\\n\\t}\\n})\"\r\n    },\r\n    // react\r\n    {\r\n        html: '<div id=\"root\"></div>',\r\n        css: '#root{\\n\\tcolor: red;\\n\\tfont-family: arial;\\n}\\nh1{\\n\\tcursor: pointer;\\n\\tuser-select: none;\\n}',\r\n        // javascript: \"const name = 'world'; \\n\\nReactDOM.render(\\n\\t<h1>Привет, {name}!</h1>, \\n\\tdocument.getElementById('root')\\n);\"\r\n        javascript: \"function App(){\\n\\n\\tconst [count, setCount] = React.useState(0);\\n\" +\r\n                    \"\\n\\treturn <h1 onClick={()=>setCount(count+1)}>\\n\\t\\tClick me: {count}!\\n\\t</h1>;\\n}\\n\\nReactDOM.render(\\n\\t<App/>,\\n\\tdocument.getElementById('root')\\n);\"\r\n    },\r\n]","/**\r\n * initialize global funcs in the sandbox\r\n * \r\n * (обработчики событий, назначенных в атрибутах, должны быть глобальными. Назначаем их глобальными здесь)\r\n * \r\n * @param {*} code \r\n * @returns \r\n */\r\nexport function generateGlobalInintializer(code) {\r\n\r\n    let globalInit = (code.match(/function ([\\w\\d_]+)\\s?\\(/gm) || [])\r\n        .map(it => it.split(' ')[1].replace('(', '').trim())\r\n        .map(it => 'globalThis.' + it + ' = ' + it).join(';\\n');\r\n\r\n    return globalInit;\r\n}\r\n\r\n\r\nexport const isPaired = (/** @type {string} */ tag) => !~['link'].indexOf(tag);","//@ts-check\r\n\r\nimport { playgroundObject } from \"../pageBuilder\";\r\n\r\nexport const commonStorage = sessionStorage;\r\n\r\n/**\r\n * @param {{ (): number; (): any; }} func\r\n * @param {number} delay\r\n */\r\nexport function debounce(func, delay) {\r\n    \r\n    let inAwaiting = false;\r\n\r\n    return function ()\r\n    {\r\n        if (!inAwaiting) {\r\n\r\n            let result = func();\r\n\r\n            inAwaiting = true;\r\n            setTimeout(() => inAwaiting = false, delay);\r\n\r\n            return result;\r\n        }\r\n    };\r\n}\r\n\r\n\r\n\r\n/**\r\n * extracts lang mode from code text\r\n * \r\n * @param {string} code\r\n * @returns {string|null}\r\n */\r\nexport function getLangMode(code)\r\n{\r\n    let langModeMatch = code.match(/\\/\\* ([\\w \\n]+) \\*\\//);\r\n\r\n    return langModeMatch\r\n        ? langModeMatch.pop()\r\n        : null;\r\n}\r\n\r\n\r\n/**\r\n * @param {string} prevName\r\n * @param {string} fullname\r\n * @param {{ find: (arg0: string) => any; getSession: () => string; }} editor\r\n */\r\nfunction renameOccurrences(prevName, fullname, editor) {\r\n    let fileStore = playgroundObject.fileStorage\r\n    fileStore[fullname] = fileStore[prevName];\r\n    delete fileStore[prevName];\r\n\r\n    for (let file in playgroundObject.fileStorage) {\r\n        if (typeof playgroundObject.fileStorage[file] === 'string') {\r\n            playgroundObject.fileStorage[file] = playgroundObject.fileStorage[file].replace(prevName, fullname);\r\n        }\r\n    }\r\n\r\n    let pos = editor.find(prevName + \"'\")\r\n    pos && editor.getSession().replace(pos, fullname + \"'\")\r\n}\r\n","export const html = (/** @type {ReadonlyArray<string>} */ text, /** @type {any[]} */ ...args) => text.reduce((p, n, i) => p + args[i - 1] + n);","//@ts-check\r\n\r\nimport { html } from \"./../utils/linter\";\r\n\r\n\r\n// HTMLElement\r\nexport class ChoiceMenu extends HTMLElement {\r\n\r\n    itemStyle = ' \\\r\n        color: white; \\\r\n        background-color: #666; \\\r\n        padding: 0.1em 1em 0.1em 2em; \\\r\n        margin-top: 1px; \\\r\n        text-align: right; \\\r\n        position: relative; '\r\n\r\n\r\n    /** selected element\r\n     * @type {HTMLElement}\r\n     */\r\n    selectedElement = null;\r\n\r\n    /** checked mark // only for external slot //\r\n     * @type {HTMLElement}\r\n     */\r\n    checkedElement = null;\r\n\r\n    /** ul\r\n     * @type {HTMLUListElement}\r\n     */\r\n    rootElement = null;\r\n\r\n    /** selected info\r\n     * @type {{id: string, metaId: string, value: string}}\r\n     */\r\n    checkInfo = null;\r\n\r\n    /// \r\n    //@ts-ignore\r\n    itemInitialize = (/** @type {HTMLLIElement} */ el) => ((el.onclick = (/** @type {Event} */ e) => this.selectedChanged(e)), el.style = this.itemStyle)\r\n\r\n    // get rootElement() { return this._rootElement; };\r\n    // set rootElement(v) {\r\n    //     console.log(v);\r\n    //     this._rootElement = v;\r\n    // }\r\n\r\n    \r\n    /** \r\n     * @deprecated\r\n     * @type number\r\n     */\r\n    // @ts-ignore    \r\n    get selectedIndex() {\r\n        let index = [].slice.call(this.rootElement.querySelectorAll('li')).indexOf(this.rootElement.querySelector('.selected'));\r\n        return index;\r\n    };\r\n    \r\n\r\n    /**\r\n     * @type string\r\n     */\r\n    // @ts-ignore\r\n    get selectedItem() {\r\n        //@ts-ignore\r\n        // return (this.rootElement.querySelector('.selected') || {}).innerText\r\n        return this.selectedElement.innerText;\r\n    };\r\n\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        /// base vars\r\n\r\n        //@ts-ignore\r\n        const rootElement = document.getElementById('choice-menu').content.cloneNode(true);\r\n        const shadowRoot = this.attachShadow({ mode: 'open' }).appendChild(rootElement);\r\n\r\n\r\n        // tactic vars\r\n\r\n        //\r\n        let menuElement = this.rootElement = this.shadowRoot.querySelector('ul');\r\n\r\n\r\n        // initialization event\r\n        const self = this; this.shadowRoot.addEventListener(\"slotchange\", function (event) {\r\n            //@ts-ignore\r\n            [menuElement] = [self.rootElement] = event.target.assignedElements();\r\n            self.checkedElement = self.shadowRoot.querySelector('.checked');\r\n            [].slice.call(self.rootElement.querySelectorAll('li')).forEach(self.itemInitialize);\r\n        });\r\n\r\n\r\n        // other events:                    \r\n        this.addEventListener('opened', () => this.pickItem(this.selectedElement))\r\n        this.addEventListener('click', this.visibleChanged);\r\n\r\n\r\n        /// only default slot:\r\n        this.rootElement.addEventListener('click', this.selectedChanged)\r\n    }\r\n\r\n\r\n    ///\r\n    visibleChanged() {\r\n\r\n        const self = this;\r\n        const opened = this.rootElement.classList.contains('active');\r\n\r\n        setTimeout(\r\n            () => {\r\n                self.rootElement.classList.toggle('active');\r\n                setTimeout(() => self.checkedElement && self.checkedElement.classList.toggle('active'), +!opened * 200)\r\n            },\r\n            +opened * 150\r\n        );\r\n\r\n        this.dispatchEvent(new CustomEvent(opened ? 'closed' : 'opened', { detail: null }))\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {HTMLElement} element \r\n     */\r\n    pickItem(element) {\r\n        setTimeout(() => {\r\n            // console.log(this.checkedElement);\r\n\r\n            this.checkedElement.style.top = element.offsetTop + this.offsetHeight + 2 + 'px'\r\n            this.checkedElement.style.right = this.rootElement.offsetWidth - 20 + 'px';  // ? + (16 * 4)  \r\n        })\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @param {Event} event\r\n     */\r\n    selectedChanged(event) {\r\n        //@ts-expect-error\r\n        if (event.target.tagName === 'li'.toUpperCase()) {\r\n            \r\n            (this.selectedElement || (this.selectedElement = this.rootElement.querySelector('.selected'))) && this.selectedElement.classList.remove('selected');\r\n            //@ts-expect-error\r\n            (this.selectedElement = event.target).classList.add('selected');\r\n\r\n            //@ts-expect-error\r\n            this.checkedElement && this.pickItem(event.target)\r\n\r\n            this.dispatchEvent(new CustomEvent(\"selected_changed\", {\r\n                detail: this.checkInfo = {\r\n                    //@ts-expect-error\r\n                    id: event.target.id,\r\n                    //@ts-expect-error\r\n                    metaId: event.target.dataset.id,\r\n                    //@ts-expect-error\r\n                    value: event.target.innerText,\r\n                }\r\n            }))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * static constructor\r\n     */\r\n    static __contructor = (function () {\r\n        \r\n        document.body.insertAdjacentHTML('afterbegin', html`\r\n            <template id=\"choice-menu\">\r\n                <style>\r\n                    /* slotted need be styled inline */\r\n                    ::slotted(li),\r\n                    li {                \r\n                        color: white;\r\n                        background-color: #666;\r\n                        padding: 0.1em 1em 0.1em 2em;\r\n                        margin-top: 1px;\r\n                        position: relative;\r\n                    }\r\n\r\n                    ::slotted(ul), ul{\r\n                        margin: 0;\r\n                        padding-left: 0;\r\n                        position: absolute;\r\n                        top: 100%;\r\n                        right: .1em;\r\n                        width: max-content;\r\n                        list-style-type: none;\r\n                        transition: .3s;\r\n                        /* display: none; */\r\n                        \r\n                        overflow: hidden;\r\n                        height: 0;\r\n                    }\r\n\r\n                    /* стили применяемые к самому  my-paragraph*/\r\n                    :host {\r\n                        margin: 0em;\r\n                        /* margin-right: 2em; */\r\n                        position: relative;\r\n                    }\r\n\r\n                    ::slotted(.active), .active{\r\n                        /*display: block !important;*/\r\n\r\n                        height: 6em;                        \r\n                        display: block !important;\r\n                    }\r\n\r\n                    .selected::after, .checked{\r\n                        content: '';\r\n                        background: url(/static/images/check_mark.svg) no-repeat;\r\n                        background-size: contain;\r\n                        width: 1em;\r\n                        height: 2em;\r\n                        position: absolute;\r\n                        left: .5em;\r\n                        top: 0.15em;\r\n                    }\r\n\r\n                    .checked{\r\n                        left: auto;\r\n                        /* opacity: 0; */\r\n                        /* transition: opacity .3s ease .3s; */\r\n                        display: none; \r\n                        z-index: 5;\r\n                    }\r\n\r\n                </style>\r\n\r\n                <!-- <slot name=\"text\">My default text</slot> -->\r\n                <div class=\"checked\"></div>\r\n                <slot>\r\n                    <ul>\r\n                        <li class=\"selected\">item 1</li>\r\n                        <li>item 2</li>\r\n                    </ul>\r\n                </slot>\r\n\r\n            </template>\r\n        `);\r\n\r\n    })()\r\n\r\n}\r\n\r\n\r\n","export const modes = [\r\n    'html',\r\n    'css',\r\n    'javascript',\r\n    // 'typescript',\r\n]","// @ts-check\r\n\r\nimport { babelCompiler, compilers } from \"./features/compiler\";\r\nimport { generateGlobalInintializer, isPaired } from \"./utils/page_generator\";\r\nimport { commonStorage, getLangMode } from './utils/utils';\r\n\r\n// TODO REMOVE:\r\nimport { ChoiceMenu } from \"./ui/ChoiceMenu\";\r\nimport { modes as baseModes } from \"./features/base\";\r\n\r\n\r\nexport { compilers, babelCompiler };\r\n\r\n/**\r\n * @type {{editors: any[], iframe: any, curUrl: any, fileStorage: object, modes?: [object?, object?, object?], onfilerename?: Function, onfileRemove?: (name: string) => void}}\r\n */\r\nexport const playgroundObject = {\r\n    editors: [],\r\n    iframe: null,\r\n    curUrl: null,\r\n    fileStorage: { _active: 0 },\r\n    modes: null,\r\n    onfilerename: null,\r\n    onfileRemove: null\r\n}\r\n\r\n\r\n/**\r\n * @param {{ [x: string]: string; }} [attrs]\r\n */\r\nfunction createHtml({ body, style, script, link }, attrs) {\r\n\r\n    // globalThis.__debug && console.log(arguments);\r\n\r\n    const htmlStruct = {\r\n        html: {\r\n            head: {\r\n                style,\r\n                script,\r\n                link\r\n            },\r\n            body\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {{ [x: string]: any; html?: { head: { [x: string]: string; script: string; }; body: any; }; }} nodeStruct\r\n     */\r\n    function nodeCreate(nodeStruct) {\r\n\r\n        let html = '';\r\n        for (const key in nodeStruct) {\r\n\r\n            let _attrs = attrs[key] || '';\r\n            let content = typeof nodeStruct[key] === typeof nodeStruct\r\n                ? nodeCreate(nodeStruct[key])\r\n                : (nodeStruct[key] || '');\r\n\r\n            html += content !== null\r\n                ? ('<' + key + _attrs + '>' + content + '</' + key + '>')\r\n                : ('<' + key + _attrs + '/>');\r\n\r\n        }\r\n        return html;\r\n    }\r\n\r\n    return nodeCreate(htmlStruct);\r\n}\r\n\r\n\r\n/**\r\n * \r\n * TODO: option {simplestBundler, fileStore}\r\n * \r\n * @param {string} [prevUrl] - предыдущий URL для освобождения\r\n * @param {string[]} [additionalScripts] - дополнительные скрипты, которые будут добавлены на новую страницу (react, vue, preact...)\r\n * @param {string} [scriptType] - атрибут тега скрипт, который будет добавлен в к тегу script на созданной странице (type=)\r\n * @param {object} [options]\r\n * @returns {[HTMLElement, string]}\r\n */\r\nexport function createPage(prevUrl, additionalScripts, scriptType, options) {\r\n\r\n    // alert(99)\r\n    if ((playgroundObject.fileStorage || window['fileStore']) && playgroundObject.editors) {\r\n        const fileStorage = playgroundObject.fileStorage || window['fileStore'];\r\n        let activeTab = document.querySelector('.tabs .tab.active');\r\n        // update current tab content:\r\n\r\n        if (fileStorage) {\r\n            fileStorage[fileStorage.innerText] = playgroundObject.editors[2].getValue()\r\n        }        \r\n    }\r\n    \r\n    let _fs = (playgroundObject.fileStorage || window['fileStore'] || {});\r\n    let appCode = _fs['app.js'] || _fs['app.ts'] || playgroundObject.fileStorage[undefined + ''];\r\n    // globalThis.__debug && console.log('appCode');\r\n\r\n\r\n    const langMode = getLangMode(appCode);\r\n    if (langMode) {\r\n\r\n        var currentLang = playgroundObject.modes && playgroundObject.modes[2] && playgroundObject.modes[2][langMode];\r\n\r\n        \r\n        if (currentLang && currentLang.src && currentLang.target === 'self') {\r\n\r\n            // currentLang.target === 'self'        /// script ожидает загрузки скрипта на основную страницу\r\n            \r\n            let scriptID = currentLang.src.split('/').pop().split('.').shift();\r\n            let originScript = document.getElementById(scriptID)\r\n            if (!originScript) {\r\n                originScript = document.createElement('script');\r\n                //@ts-ignore\r\n                originScript.src = currentLang.src;\r\n                originScript.id = scriptID;\r\n                originScript.onload = () => {\r\n\r\n                    // createPage(prevUrl, additionalScripts, scriptType, options);\r\n                    waiting.parentElement.removeChild(waiting);\r\n                    if (options && options.onload) {\r\n                        let frameInfo = createPage(prevUrl, additionalScripts, scriptType);\r\n                        options.onload(...frameInfo);\r\n                    }\r\n                }\r\n                document.head.appendChild(originScript);\r\n                let waiting = document.querySelector('.view').appendChild(document.createElement('div'))\r\n                waiting.innerText = 'Ожидание...'\r\n                waiting.id = 'view__waiting';                \r\n                \r\n                if (options && options.onload) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    let buildJS = (/** @type {string} */ code) => {        \r\n\r\n        // convert to js:   \r\n\r\n        if (window['simplestBundler']) {\r\n            code = window['simplestBundler'].default(code, playgroundObject.fileStorage || window['fileStore']);\r\n            globalThis.__debug && console.log('build...');\r\n        }\r\n        else {\r\n            console.warn('bundler is absent');\r\n            // alert('Warn/ look logs')\r\n        }        \r\n\r\n        // ts transpilation:\r\n        if (currentLang && currentLang.compileFunc) {\r\n            code = currentLang.compileFunc(code);\r\n        }\r\n\r\n        // \r\n        let globalReinitializer = generateGlobalInintializer(code);\r\n\r\n        code = 'window.addEventListener(\"' + (scriptType ? 'load' : 'DOMContentLoaded') + '\", function(){' + code + '\\n\\n' + globalReinitializer + '\\n});';\r\n\r\n        // customLOG\r\n        const logJar = document.querySelector('.console .lines');\r\n        if (logJar) {\r\n\r\n            logJar.innerHTML = '';\r\n\r\n            function customLOG(/** @type {string} */ value) {\r\n                let line = window.parent.document.querySelector('.console .lines').appendChild(document.createElement('div'));\r\n                line.innerText = typeof value === 'object' ? JSON.stringify(value) : value;\r\n                globalThis.__debug && console.log([].slice.call(arguments).join())\r\n            }\r\n\r\n            code = customLOG.toString() + '\\n\\n' + code.replace(/globalThis.__debug && console.log/g, 'customLOG');\r\n        }        \r\n\r\n        return code;\r\n    }\r\n\r\n\r\n    // при concat все равно скопируется\r\n    // additionalScripts = additionalScripts.slice()\r\n    \r\n    \r\n    const editors = playgroundObject.editors;\r\n    const baseTags = ['body', 'style', 'script'];\r\n    const attrs = {\r\n        script: scriptType\r\n    }\r\n\r\n    // compilerSubModes дополняем:\r\n    if (playgroundObject.modes && playgroundObject.modes.length) playgroundObject.editors.forEach((editor, i) => {\r\n\r\n        /**\r\n         * @type ChoiceMenu\r\n         */\r\n        let modeMenu = editor.container.querySelector('choice-menu');\r\n        if (modeMenu) {\r\n            /**\r\n             * @type {{src: string|string[], target?: {tag: string, attributes: string, inside?: true}}}\r\n             */\r\n            let actualMode = playgroundObject.modes[i][modeMenu.selectedElement.innerText]\r\n            if (actualMode) {                \r\n                // additionalScripts = (additionalScripts || []).concat(typeof actualMode.src === 'string' ? [actualMode.src] : actualMode.src);\r\n                [].slice.call(typeof actualMode.src === 'string' ? [actualMode.src] : actualMode.src).forEach(el => additionalScripts.push(el));\r\n                // дополнительные скрипты. В частности less\r\n                window['__debug'] && console.log(additionalScripts);\r\n            }\r\n            \r\n            if (actualMode && actualMode.target) {\r\n                                                \r\n                /// possibility change style tag to link tag:\r\n                if (actualMode.target.tag) baseTags[i] = actualMode.target.tag;\r\n\r\n                if (actualMode.target.inside) {\r\n\r\n                    // here constructs tags that will involve right to iframe:\r\n                    \r\n                    let blob = new Blob([editors[i].getValue()], { type: 'text/' + baseModes[i] });\r\n                    let link = URL.createObjectURL(blob);\r\n                    // actualMode.target.attributes = actualMode.target.attributes.replace('{}', link)\r\n                    actualMode.target.attributes = actualMode.target.attributes.replace(/href\\=\"[\\:\\w\\d-\\{\\}/\\.]+\"/, 'href=\"' + link + '\"')\r\n                    // window['__debug'] && console.log(baseModes[i]);\r\n                    window['__debug'] && console.log(link);\r\n                    // window['__debug'] && console.log(actualMode.target);\r\n                }\r\n                if (actualMode.target.attributes) attrs[baseTags[i]] = actualMode.target.attributes;\r\n            }\r\n        }\r\n    })\r\n\r\n    \r\n    /// TODO? @import 'style.css' to style html tag from link file?\r\n    \r\n    let htmlContent = baseTags.reduce((acc, el, i, arr) => (\r\n        (\r\n            acc[el] = i < 2\r\n                ? isPaired(el) ? editors[i].getValue() : null\r\n                : buildJS(appCode || editors[i].getValue())\r\n        ), acc),\r\n        {}\r\n    );    \r\n\r\n    let optionalScripts = ''\r\n    if (additionalScripts && additionalScripts.length) {\r\n        for (let i = 0; i < additionalScripts.length; i++) {\r\n            // htmlContent['body'] += '<script src=\"' + additionalScripts[i] + '\"></script>';\r\n            optionalScripts += '<script src=\"' + additionalScripts[i] + '\"></script>';\r\n        }\r\n    }    \r\n    \r\n    window['__debug'] && console.log('htmlContent', htmlContent);\r\n\r\n    let html = createHtml(htmlContent, attrs);\r\n\r\n    globalThis.__debug && console.log(optionalScripts);\r\n    html = html.replace('</head>', optionalScripts + '</head>');\r\n    html = html.replace('<head>', '<head><meta charset=\"UTF-8\">');\r\n\r\n    let file = new Blob([html], { type: 'text/html' });\r\n\r\n    prevUrl && URL.revokeObjectURL(prevUrl);\r\n    let url = URL.createObjectURL(file);\r\n\r\n    let view = document.querySelector('.view');\r\n    playgroundObject.iframe && (playgroundObject.iframe.parentElement === view) && view.removeChild(playgroundObject.iframe);\r\n    // view.innerHTML = '';    \r\n\r\n    let frame = document.createElement('iframe');\r\n    frame.src = url;\r\n    view.appendChild(frame)\r\n\r\n    return [frame, url]\r\n}\r\n\r\n\r\n/**\r\n * // @param {(url: string) => [HTMLIFrameElement, string]} [createPageFunc]\r\n * @param {boolean} jsxMode\r\n * ///! param {number} compilerMode\r\n * @param {string[]} compilerModes - list of script libs to attach to generated page\r\n * \r\n * TODO: options: {storage (localStorage|sessionStorage), fileStore}\r\n */\r\nexport function webCompile(jsxMode, compilerModes) {\r\n\r\n    globalThis.__debug && console.log('compile');\r\n\r\n    // [iframe, curUrl] = createPage(curUrl);\r\n    // globalThis.__debug && console.log(iframe);\r\n\r\n    \r\n\r\n    let iframe = playgroundObject.iframe,\r\n        editors = playgroundObject.editors;\r\n\r\n    const fileStorage = playgroundObject.fileStorage || window['fileStore'];\r\n    //@ts-ignore\r\n    if (Object.keys(fileStorage || {}).length) {\r\n        let activeTab = document.querySelector('.tabs .tab.active');\r\n        //@ts-ignore\r\n        if (activeTab) fileStorage[activeTab.innerText] = editors[2].getValue()\r\n        // else {\r\n        //     fileStorage[undefined + ''] = editors[2].getValue()\r\n        // }\r\n    }\r\n\r\n\r\n\r\n\r\n    if (iframe.contentDocument && !jsxMode && false) {\r\n        \r\n        iframe.contentDocument.body.innerHTML = editors[0].getValue()\r\n        iframe.contentDocument.head.querySelector('style').innerHTML = editors[1].getValue()\r\n\r\n        let lastScript = [].slice.call(iframe.contentDocument.querySelectorAll('script')).pop();\r\n        lastScript && lastScript.parentElement.removeChild(lastScript);\r\n\r\n        // let lastScripts = iframe.contentDocument.querySelectorAll('script');\r\n        // lastScripts && lastScripts.length && Array.prototype.slice.call(lastScripts).forEach((/** @type {{ parentElement: { removeChild: (arg: any) => void; }; }} */ element) =>\r\n        // {\r\n        //     element.parentElement.removeChild(element);\r\n        // });\r\n        \r\n        let script = iframe.contentDocument.createElement('script');\r\n        \r\n        globalThis.__debug && console.log(jsxMode)\r\n        globalThis.__debug && console.log(compilerModes);\r\n\r\n        if (jsxMode) {\r\n            \r\n            // for (let i = 0; i < compilerMode.length; i++) {\r\n            //     const link = compilerMode[i];\r\n\r\n            //     let jsxCompiler = iframe.contentDocument.createElement('script');\r\n            //     jsxCompiler.src = link;\r\n            //     iframe.contentDocument.body.appendChild(jsxCompiler);\r\n            // }\r\n\r\n            script.type = \"text/babel\";\r\n        }\r\n\r\n        let code = playgroundObject.fileStorage['app.js'] || playgroundObject.fileStorage['app.ts'] || editors[2].getValue();\r\n\r\n        let globalReinitializer = generateGlobalInintializer(code)\r\n\r\n        script.innerHTML = '(function(){' + code + ';\\n\\n' + globalReinitializer + '\\n})()'\r\n        iframe.contentDocument.body.appendChild(script)\r\n\r\n        // iframe.contentDocument.head.querySelector('script').innerHTML = editors[2].getValue()\r\n    }\r\n    else {\r\n        // globalThis.__debug && console.log(compilerMode);\r\n        // globalThis.__debug && console.log(Object.values(compilers)[compilerMode]);\r\n        // let [iframe, curUrl] = createPage(playgroundObject.curUrl, Object.values(compilers)[compilerMode], jsxMode ? babelCompiler.mode : undefined);\r\n        let [iframe, curUrl] = createPage(playgroundObject.curUrl, compilerModes, jsxMode ? babelCompiler.mode : undefined);\r\n        playgroundObject.iframe = iframe;\r\n        playgroundObject.curUrl = curUrl;\r\n    }\r\n\r\n\r\n\r\n\r\n    let compiler = Number.parseInt((commonStorage || localStorage).getItem('mode') || '0');\r\n\r\n    // just sandbox feature:\r\n    (commonStorage || localStorage).setItem(compiler + '__html', editors[0].getValue());\r\n    (commonStorage || localStorage).setItem(compiler + '__css', editors[1].getValue());\r\n    (commonStorage || localStorage).setItem(compiler + '__javascript', editors[2].getValue());\r\n    \r\n\r\n\r\n    let modulesStore = {};\r\n\r\n    console.log('save modules...')\r\n\r\n    if (fileStorage && Object.keys(fileStorage).length > 1) {\r\n        \r\n        for (let i = 0; i < Object.keys(fileStorage).length; i++) {\r\n            const fileName = Object.keys(fileStorage)[i];\r\n            if (fileName.startsWith('_')) continue;\r\n            modulesStore[fileName] = fileStorage[fileName];\r\n        }\r\n\r\n        // js multitabs:\r\n        (commonStorage || localStorage).setItem('_modules', JSON.stringify(modulesStore));\r\n        globalThis.__debug && console.log('save modules...');\r\n    }\r\n\r\n    // document.getElementById('compiler_mode')\r\n}\r\n\r\n\r\n\r\n"],"names":["preactCompiler","set","document","location","origin","host","indexOf","babelCompiler","link","mode","compilers","vanile","undefined","preact","concat","Object","values","vue","react","reactDOM","generateGlobalInintializer","code","match","map","it","split","replace","trim","join","commonStorage","sessionStorage","html","text","args","reduce","p","n","i","HTMLElement","body","insertAdjacentHTML","modes","playgroundObject","editors","iframe","curUrl","fileStorage","_active","onfilerename","onfileRemove","createPage","prevUrl","additionalScripts","scriptType","options","window","querySelector","innerText","getValue","_fs","appCode","langMode","langModeMatch","pop","getLangMode","currentLang","src","target","scriptID","shift","originScript","getElementById","createElement","id","onload","waiting","parentElement","removeChild","frameInfo","head","appendChild","baseTags","attrs","script","length","forEach","editor","modeMenu","container","actualMode","selectedElement","slice","call","el","push","console","log","tag","inside","blob","Blob","type","baseModes","URL","createObjectURL","attributes","htmlContent","acc","arr","default","globalThis","__debug","warn","compileFunc","globalReinitializer","logJar","customLOG","value","parent","JSON","stringify","arguments","innerHTML","toString","buildJS","optionalScripts","style","nodeCreate","nodeStruct","key","_attrs","content","createHtml","file","revokeObjectURL","url","view","frame","jsxMode","compilerModes","keys","activeTab","contentDocument","compiler","Number","parseInt","localStorage","getItem","setItem","modulesStore","fileName","startsWith"],"mappings":"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"}